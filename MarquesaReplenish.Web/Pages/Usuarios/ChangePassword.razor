@page "/changePassword"
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager
@inject ILoginService loginService
@*@attribute [Authorize]*@


<h3>Cambiar contraseña</h3>
<EditForm Model="changePasswordDTO" OnValidSubmit="ChangePasswordAsync">
    <DataAnnotationsValidator />
    <h5>Campo obligatorio *</h5>
    <div class="row" style="width: 700px;">
        <div class="col-6">
            <div class="mb-3">
                <label>Contraseña actual*:</label>
                <div>
                    <InputText id="contraseñaAnterior" type="password" class="form-control" @bind-Value="@changePasswordDTO.currentPassword" />
                    <ValidationMessage For="@(() => changePasswordDTO.currentPassword)" />
                </div>
            </div>

            <div class="mb-3">
                <label>Nueva contraseña*:</label>
                <div>
                    <InputText id="nuevaContraseña" type="password" class="form-control" @bind-Value="@changePasswordDTO.newPassword" />
                    <ValidationMessage For="@(() => changePasswordDTO.newPassword)" />
                </div>
            </div>

            <div class="mb-3">
                <label>Confirmar nueva contraseña*:</label>
                <div>
                    <InputText id="ConfirmarContraseña" type="password" class="form-control" @bind-Value="@changePasswordDTO.confirmPassword" />
                    <ValidationMessage For="@(() => changePasswordDTO.confirmPassword)" />
                </div>
            </div>

            
            
        </div>
      
    </div>
    <button id="Atras" class="btn btn-danger" onclick="@Atras">Atrás</button>
    <button id="cambiarContraseña" class="btn btn-primary" type="submit">Cambiar contraseña</button>
    
</EditForm>

@code {
    private ChangePasswordDTO changePasswordDTO = new();
    private bool loading;

    private async Task ChangePasswordAsync()
    {
        loading = true;
        var responseHttp = await repository.Post<ChangePasswordDTO, TokenDTO>($"{Configuracion["VariableApi:AuthenticationApi"]}/api/accounts/changePassword", changePasswordDTO);
        if (responseHttp.Error)
        {
            string? message = await responseHttp.GetErrorMessageAsync();
            bool comienzaConCorcheteAbierto = message.StartsWith("[");
            bool terminaConCorcheteCerrado = message.EndsWith("]");

            if (comienzaConCorcheteAbierto && terminaConCorcheteCerrado)
            {
                List<ErrorDTO> Errors = JsonSerializer.Deserialize<List<ErrorDTO>>(message);
                message = string.Join("\n", Errors.Select(t => t.description));
            }
            else
            {
                message = "[" + message + "]";
                List<ErrorDTO> Errors = JsonSerializer.Deserialize<List<ErrorDTO>>(message);
                message = string.Join("\n", Errors.Select(t => t.description));
            }

            if (message.Contains("Esta contraseña ya ha sido utilizada anteriormente por favor cambiarla"))
            {
                message = "Esta contraseña ya ha sido utilizada anteriormente por favor cambiarla";
            }
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            loading = false;
            return;
        }

        loading = false;
        await loginService.LoginAsync(responseHttp.Response!.Token);
        navigationManager.NavigateTo("/");
        var toast = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.TopEnd,
                ShowConfirmButton = true,
                Timer = 5000
            });
        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Contraseña cambiada con éxito.");
    }

    public void Atras()
    {
        navigationManager.NavigateTo("/");
    }
}
