@page "/RecoverPassword"
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager
@inject ILoginService loginService
@inject IConfiguration Configuracion

@if (loading)
{
    <div style="width: 360px; height: 360px;" class="spinner" />
}
else
{
<div class="d-flex justify-content-center align-items-center" style="height: 82vh;width: 195vh;">
    <div class="row">
        <div class="col-6" style="width: 421px;">
            <EditForm Model="emailDTO" OnValidSubmit="SendRecoverPasswordEmailTokenAsync">
                <DataAnnotationsValidator />
                <div class="card">
                    <div class="card-header">
                        <span>
                            <i class="oi oi-key" /> Para recuperar la contraseña ingresa el Nombre de usuario.
                        </span>
                    </div>
                    <div class="card-body">
                        <div class="mb-3">
                            <label>Usuario:</label>
                            <div>
                                <InputText id="usuario" class="form-control" @bind-Value="@emailDTO.usuario" />
                                <ValidationMessage For="@(() => emailDTO.usuario)" />
                            </div>
                        </div>
                        <button id="submit" class="btn btn-sm btn-primary float-end mx-2" type="submit"><i class="oi oi-loop-square" /> Enviar</button>
                            <button id="Login" onclick="@IraLogin" class="btn btn-sm btn-danger float-end mx-2"><i /> Login</button>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
</div>
}
@code {
    private EmailDTO emailDTO = new();


    private bool loading;
    protected async override Task OnInitializedAsync()
    {
        emailDTO.AplicacionId = "026767a2-a87a-4a6a-82ac-9c2619e1343e";
    }
    private async Task SendRecoverPasswordEmailTokenAsync()
    {
        loading = true;
        var Cadena = Configuracion.GetSection("VariableApi")["AuthenticationApi"];
        var responseHttp = await repository.Post<EmailDTO,RecoverPasswordDTO>($"{Cadena}/api/Accounts/RecoverPassword", emailDTO);
        if (responseHttp.Error)
        {
            string? message = await responseHttp.GetErrorMessageAsync();
            bool comienzaConCorcheteAbierto = message.StartsWith("[");
            bool terminaConCorcheteCerrado = message.EndsWith("]");

            if (comienzaConCorcheteAbierto && terminaConCorcheteCerrado)
            {
                List<ErrorDTO> Errors = JsonSerializer.Deserialize<List<ErrorDTO>>(message);
                message = string.Join("\n", Errors.Select(t => t.description));
            }
            else
            {
                message = "[" + message + "]";
                List<ErrorDTO> Errors = JsonSerializer.Deserialize<List<ErrorDTO>>(message);
                message = string.Join("\n", Errors.Select(t => t.description));
            }

            if (message.Contains("El usuario al cual se la va recuperar la contraseña no existe."))
            {
                message = "El usuario indicado no se encuentra registrado en el sistema";

            }
            
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            loading = false;
            return;
        }

        loading = false;
        await sweetAlertService.FireAsync("Confirmación", "Se ha enviado un correo electrónico con las instrucciones para recuperar su contraseña.", SweetAlertIcon.Info);
        navigationManager.NavigateTo("/Login");
    }

    public void IraLogin()
    {
        navigationManager.NavigateTo("/Login");
    }
}
