@page "/ExpiredPassword"
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager
@inject ILoginService loginService
@*@attribute [Authorize]*@


@if (loading)
{
    <div style="width: 360px; height: 360px;" class="spinner" />
}
else
{
    <div class="d-flex justify-content-center align-items-center" style="height: 82vh;width: 195vh;">
        <div class="row">
            <div class="col-6" style="width: 421px;">
                <h3>Cambiar contraseña expirada</h3>
                <EditForm Model="expirPassword" OnValidSubmit="ChangePasswordAsync">
                    <DataAnnotationsValidator />
                    <h5>Campo obligatorio *</h5>
                    <div class="row" style="width: 700px;">
                        <div class="col-6">
                            <div class="mb-3">
                                <label>Contraseña actual*:</label>
                                <div>
                                    <InputText id="contraseñaAnterior" type="password" class="form-control" @bind-Value="@expirPassword.CurrentPassword" />
                                    <ValidationMessage For="@(() => expirPassword.CurrentPassword)" />
                                </div>
                            </div>

                            <div class="mb-3">
                                <label>Nueva contraseña*:</label>
                                <div>
                                    <InputText id="nuevaContraseña" type="password" class="form-control" @bind-Value="@expirPassword.NewPassword" />
                                    <ValidationMessage For="@(() => expirPassword.NewPassword)" />
                                </div>
                            </div>

                            <div class="mb-3">
                                <label>Confirmar nueva contraseña*:</label>
                                <div>
                                    <InputText id="ConfirmarContraseña" type="password" class="form-control" @bind-Value="@expirPassword.ConfirmPassword" />
                                    <ValidationMessage For="@(() => expirPassword.ConfirmPassword)" />
                                </div>
                            </div>



                        </div>

                    </div>
                    <button id="Atras" class="btn btn-danger" onclick="@Atras">Atrás</button>
                    <button id="cambiarContraseña" class="btn btn-primary" type="submit">Cambiar contraseña</button>

                </EditForm>
            </div>
        </div>
    </div>
}

@code {
    private ExpiredPasswordDTO expirPassword = new();
    private bool loading;

    [Parameter]
    [SupplyParameterFromQuery]
    public string userName { get; set; } = "";

    private async Task ChangePasswordAsync()
    {
        loading = true;

        var Cadena = Configuracion.GetSection("VariableApi")["AuthenticationApi"];
        expirPassword.UserName = userName;
        var responseHttp = await repository.Post<ExpiredPasswordDTO>($"{Cadena}/api/accounts/ChangePasswordExpired", expirPassword);
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            bool comienzaConCorcheteAbierto = message.StartsWith("[");
            bool terminaConCorcheteCerrado = message.EndsWith("]");

            if (comienzaConCorcheteAbierto && terminaConCorcheteCerrado)
            {
                List<ErrorDTO> Errors = JsonSerializer.Deserialize<List<ErrorDTO>>(message);
                message = string.Join("\n", Errors.Select(t => t.description));
            }
            else
            {
                message = "["+message+"]";
                List<ErrorDTO> Errors = JsonSerializer.Deserialize<List<ErrorDTO>>(message);
                message = string.Join("\n", Errors.Select(t => t.description));
            }

            if (message.Contains("Esta contraseña ya ha sido utilizada anteriormente por favor cambiarla"))
            {
                message = "Esta contraseña ya ha sido utilizada anteriormente  por favor cambiarla";
            }
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            loading = false;
            return;
        }

        loading = false;
        
        await sweetAlertService.FireAsync("Proceso correcto", "La contraseña se ha actualizado con éxito.", SweetAlertIcon.Success);
        navigationManager.NavigateTo("/Login");
    }

    public void Atras()
    {
        navigationManager.NavigateTo("/Login");
    }
}