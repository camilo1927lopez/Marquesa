@page "/api/Accounts/ResetPassword"
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager

@if (loading)
{
   <div style="width: 360px; height: 360px;" class="spinner" />
}
else
{
    <div class="d-flex justify-content-center align-items-center" style="height: 82vh;width: 195vh;">
    <div class="row">
        <div class="col-6" style="width: 485px;">
            <EditForm Model="resetPasswordDTO" OnValidSubmit="ChangePasswordAsync">
                <DataAnnotationsValidator />
                <div class="card">
                    <div class="card-header">
                        <span>
                            <i class="oi oi-key" /> Cambiar Contraseña
                            <button id="cambiarContraseña" class="btn btn-sm btn-primary float-end mx-2" type="submit"><i class="oi oi-check" /> Cambiar Contrasña</button>
                            <button id="Login" onclick="@IraLogin" class="btn btn-sm btn-danger float-end mx-2" ><i/> Login</button>
                        </span>
                    </div>
                    <div class="card-body">

                        <div class="mb-3">
                            <label>Nueva contraseña*:</label>
                            <div>
                                <InputText id="newPassword" type="password" class="form-control" @bind-Value="@resetPasswordDTO.password" />
                                <ValidationMessage For="@(() => resetPasswordDTO.password)" />
                            </div>
                        </div>
                        <div class="mb-3">
                            <label>Confirmar nueva contraseña*:</label>
                            <div>
                                <InputText id="confirmPassword" type="password" class="form-control" @bind-Value="@resetPasswordDTO.confirmPassword" />
                                <ValidationMessage For="@(() => resetPasswordDTO.confirmPassword)" />
                            </div>
                        </div>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
 </div>
}


@code {
    private ResetPasswordDTO resetPasswordDTO = new();
    private bool loading;

    [Parameter]
    [SupplyParameterFromQuery]
    public string token { get; set; } = "";

    [Parameter]
    [SupplyParameterFromQuery]
    public string userid { get; set; } = "";

    private async Task ChangePasswordAsync()
    {
        loading = true;
        resetPasswordDTO.token = token;
        resetPasswordDTO.usuario = userid;
        var responseHttp = await repository.Post($"{Configuracion["VariableApi:AuthenticationApi"]}/api/accounts/ResetPassword", resetPasswordDTO);
        if (responseHttp.Error)
        {
            string? message = await responseHttp.GetErrorMessageAsync();
            bool comienzaConCorcheteAbierto = message.StartsWith("[");
            bool terminaConCorcheteCerrado = message.EndsWith("]");

            if (comienzaConCorcheteAbierto && terminaConCorcheteCerrado)
            {
                List<ErrorDTO> Errors = JsonSerializer.Deserialize<List<ErrorDTO>>(message);
                message = string.Join("\n", Errors.Select(t => t.description));
            }
            else
            {
                message = "[" + message + "]";
                List<ErrorDTO> Errors = JsonSerializer.Deserialize<List<ErrorDTO>>(message);
                message = string.Join("\n", Errors.Select(t => t.description));
            }

            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            loading = false;
            return;
           
        }

        loading = false;
        await sweetAlertService.FireAsync("Bien Hecho", "Contraseña recuperada  con éxito, ahora puede ingresar con su nueva contraseña.", SweetAlertIcon.Info);
        navigationManager.NavigateTo("/Login");
    }

    public void IraLogin()
    {
        navigationManager.NavigateTo("/Login");
    }

}
