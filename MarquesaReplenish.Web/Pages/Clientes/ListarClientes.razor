@page "/Clientes"
@using Microsoft.AspNetCore.Authorization;
@using System.Drawing;
@using System.IO;
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager
@inject ILoginService loginService
@using System.Security.Claims;
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]

@if (Clientes is null)
{
    <div class="spinner" />
}
else
{
    <Pagination CurrentPage="currentPage"
                TotalPages="totalPages"
                SelectedPage="SelectedPageAsync" />
                <GenericList MyList="Clientes">
<h3>Clientes</h3>
 
        <body>
            <div class="card">
                <div class="card-header">
                    <span>
                        <i class="oi oi-list"></i> Clientes
                        <a id="CrearCliente" class="btn btn-sm btn-primary float-end" href="/CrearCliente"><i class="oi oi-plus"></i> Crear Cliente</a>
                    </span>
                </div>
                
                <div class="card-body">
                    <div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
                        <div>
                            <input style="width: 400px;" type="text" class="form-control" id="titulo" placeholder="Buscar Cliente..." @bind-value="Filter" />
                        </div>
                        <div class="mx-1">
                            <button type="button" class="btn btn-outline-primary" @onclick="ApplyFilterAsync"><i class="oi oi-layers" /> Filtrar</button>
                            <button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync"><i class="oi oi-ban" /> Limpiar</button>
                        </div>
                    </div>

                    <div style="width: 1036px; height: 290px; overflow-x: scroll; overflow-y: scroll;">
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th style="font-size: 15px;">Logo</th>
                                <th style="font-size: 15px;">Nombre</th>
                                <th style="font-size: 15px;">NIT</th>
                                <th style="font-size: 15px;">Estado</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (Clientes != null)
                            {
                                    
                                    @foreach (var cliente in Clientes)
                                {
                                        <tr>
                                        @if (!string.IsNullOrEmpty(cliente.Img))
                                        {
                                            string base64String = cliente.Img;
                                            string imageSource = $"data:image/png;base64,{base64String}";

                                        <td class="imagen" style="font-size: 12px; width:20px;">
                                            <img style="width: 135px;height: 90px;" src="@imageSource" alt="Imagen">
                                        </td>
                                        }
                                        else
                                        {
                                        <td class="imagen" style="font-size: 12px; width:20px;">
                                            <img style="width: 135px" src="/no-image.png" alt="Imagen">
                                        </td>
                                        }

                                        
                                            
                                        
                                        <td style="font-size: 12px;">
                                            @cliente.Nombre
                                        </td>
                                        <td style="font-size: 12px;">
                                            @cliente.Nit
                                        </td>
                                        <td style="font-size: 12px;">
                                            @if (cliente.Estado == true)
                                            {
                                                <p>Activo</p>
                                            }
                                            else
                                            {
                                                <p>Inactivo</p>

                                            }
                                        </td>

                                        <td style="font-size: 12px;width: 10px;">
                                            @if (cliente.Estado == true)
                                            {
                                                    <a href="/EditCliente/@cliente.Id" class="btn btn-dark"><i class="oi oi-pencil" /></a>
                                            }
                                        </td>

                                        <td style="font-size: 12px;width: 10px;">
                                            @if (cliente.Estado != true)
                                            {
                                                <button class="btn btn-success" @onclick=@(() => State(cliente.Id))><i class="fa-sharp fa-solid fa-check"></i></button>
                                            }
                                            else
                                            {
                                                <button class="btn btn-danger" @onclick=@(() => State(cliente.Id))><i class="fa-solid fa-x"></i></button>
                                            }

                                        </td>
                                    </tr>
                                }

                            }
                           
                        </tbody>
                    </table>
                    </div>
                </div>
            </div>
        </body>
   </GenericList>
  }



@code 
{

    public List<tblCliente>? Clientes  { get; set; }
    public List<tblCliente>? ClientesFilter { get; set; }
    public List<tblCliente>? ClientesPaginado { get; set; }
    private bool toFeach = false;
    private bool ToFilter = false;
    private int currentPage = 1;
    private int totalPages;
    bool Inactividad = false;
    private string userRole;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = string.Empty;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = string.Empty;


    protected async override Task OnInitializedAsync()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;

        if (user.Identity.IsAuthenticated)
        {
            // Obtener el rol del usuario (asumiendo que estás utilizando roles)
            userRole = user.FindFirst(ClaimTypes.Role)?.Value;
        }

        string UserName = user.Identity.Name;
        if (UserName != null)
        {
            await LoadAsync();    
        }

            
  
    }



    private async Task LoadAsync(int page = 1)
    {
        ClientesPaginado = new();
        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }



        try
        {
            var responseHtt = await repository.Get<List<tblCliente>>("/api/clientes");

            if (responseHtt.HttpResponseMessage.StatusCode.ToString() == "Unauthorized" || responseHtt.HttpResponseMessage.StatusCode.ToString() == "Unauthorized")
            {
                Inactividad = true;
                var Message = "La sesión ha expirado";
                await sweetAlertService.FireAsync("Fallo de sesión", Message, SweetAlertIcon.Error);
                await loginService.LogoutAsync();
                navigationManager.NavigateTo("/Login");
                toFeach = true;
                return;
            }
            Clientes = responseHtt.Response;

            if (ToFilter == true)
            {
                ClientesFilter = new();
                foreach (var item in Clientes)
                {
                    if (item.Nombre.ToLower().Contains(Filter.ToLower()) || item.Nit.ToLower().Contains(Filter.ToLower()))
                    {
                        ClientesFilter.Add(item);
                    }
                }

                Clientes = ClientesFilter;
                ToFilter = false;
            }

            int redondeo = (int)Math.Ceiling(Clientes.Count / 10.0);
            totalPages = redondeo;

            int startIndex = (page - 1) * 10;
            int endIndex = Math.Min(startIndex + 10, Clientes.Count);

            // Mostramos los clientes en el rango determinado
            for (int i = startIndex; i < endIndex; i++)
            {
                ClientesPaginado.Add(Clientes[i]);
            }

            Clientes = ClientesPaginado;

        }
        catch (Exception ex)
        {
            if (toFeach == false)
            {

                if (ex.Message.Contains("Object reference not set to an instance of an object."))
                {
                    var Message = "La sesión ha expirado";
                    await sweetAlertService.FireAsync("Fallo de sesión", Message, SweetAlertIcon.Error);
                    await loginService.LogoutAsync();
                    navigationManager.NavigateTo("/Login");
                }

                if (ex.Message.Contains("TypeError: Failed to fetch"))
                {
                    var Message = "La sesión ha expirado";
                    await sweetAlertService.FireAsync("Fallo de sesión", Message, SweetAlertIcon.Error);
                    await loginService.LogoutAsync();
                    navigationManager.NavigateTo("/Login");
                }
                else
                {
                    await sweetAlertService.FireAsync("Error", ex.Message, SweetAlertIcon.Error);
                }

            }


        }
    }

    private async Task State(int idCliente)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Estás seguro de que quieres cambiar el estado de actividad del cliente?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        var responseHTTP = await repository.Post($"/api/clientes/UpdateClienteEstado?idCliente={idCliente}", idCliente);

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/Usuarios");
            }
            else
            {
                var mensajeError = await responseHTTP.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
        }
        else
        {
            await LoadAsync(currentPage);
           

        }
    }

    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        ToFilter = true;
        await LoadAsync();
        
    }
    private async Task SelectedPageAsync(int page)
    {
        currentPage = page;
        await LoadAsync(page);
        
    }

   



}
